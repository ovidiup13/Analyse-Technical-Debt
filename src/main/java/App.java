import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLOutput;
import java.util.List;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.InvalidRemoteException;
import org.eclipse.jgit.api.errors.JGitInternalException;
import org.eclipse.jgit.api.errors.TransportException;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.lib.ObjectReader;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.treewalk.AbstractTreeIterator;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import utils.Utils;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    private static Logger LOGGER = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) {

        String tmp = Paths.get(System.getProperty("user.dir"), "tmp").toString();
        File repoPath = new File(Paths.get(tmp, "zeppelin", ".git").toString());
        String uri = "https://github.com/apache/zeppelin.git";
        Git zeppelin = null;
        Repository repository = null;
        try {
            zeppelin = Utils.cloneRepository(uri, repoPath);
        } catch (InvalidRemoteException e) {
            LOGGER.error("InvalidRemoteException", e);
        } catch (TransportException e) {
            LOGGER.error("TransportException", e);
        } catch (GitAPIException e) {
            LOGGER.error("GitAPIException", e);
        } catch (JGitInternalException e) { // destination exists
            LOGGER.error("JGitInternalException", e);
            // open repository
        } finally {
            zeppelin.close();
        }

        try {
            repository = Utils.openRepository(repoPath);
            // System.out.println(zeppelin.getRepository().getDirectory().toPath().toString());
            // System.out.println(zeppelin.getRepository().getBranch());

            zeppelin = new Git(repository);
            zeppelin.checkout().setStartPoint("7af4fab420ed42edbe9f97c1c4d63823ff321c2d").call();
            // Ref head = repository.exactRef("refs/heads/master");
            // System.out.println("Ref of refs/heads/master: " + head);
            // List<Ref> call = zeppelin.branchList().call();
            // System.out.println(call);
            // for (Ref ref : call) {
            //     System.out.println("Branch: " + ref + " " + ref.getName() + " " + ref.getObjectId().getName());
            //     break;
            // }
        } catch (IOException | GitAPIException e) {
            // TODO Auto-generated catch block
            LOGGER.error("IOException", e);
        } finally {
            zeppelin.close();
        }

        // try {
        //     Iterable<RevCommit> commits = zeppelin.log().all().call();
        //     int count = 0;
        //     for (RevCommit commit : commits) {
        //         System.out.println("LogCommit: " + commit);
        //         // listDiff(repository, zeppelin, commit.getName() + "^", commit.getName());
        //         count++;
        //         if (count == 10) {
        //             break;
        //         }
        //     }
        //     System.out.println(count);
        // } catch (Exception e) {
        //     LOGGER.error("Exception", e);
        // }
    }

    private static void listDiff(Repository repository, Git git, String oldCommit, String newCommit)
            throws GitAPIException, IOException {
        final List<DiffEntry> diffs = git.diff().setOldTree(prepareTreeParser(repository, oldCommit))
                .setNewTree(prepareTreeParser(repository, newCommit)).call();

        System.out.println("Found: " + diffs.size() + " differences");
        for (DiffEntry diff : diffs) {
            System.out.println("Diff: " + diff.getChangeType() + ": "
                    + (diff.getOldPath().equals(diff.getNewPath()) ? diff.getNewPath()
                            : diff.getOldPath() + " -> " + diff.getNewPath()));
        }
    }

    private static AbstractTreeIterator prepareTreeParser(Repository repository, String objectId) throws IOException {
        // from the commit we can build the tree which allows us to construct the TreeParser
        //noinspection Duplicates
        try (RevWalk walk = new RevWalk(repository)) {
            RevCommit commit = walk.parseCommit(repository.resolve(objectId));
            RevTree tree = walk.parseTree(commit.getTree().getId());

            CanonicalTreeParser treeParser = new CanonicalTreeParser();
            try (ObjectReader reader = repository.newObjectReader()) {
                treeParser.reset(reader, tree.getId());
            }

            walk.dispose();

            return treeParser;
        }
    }
}
